{"version":3,"sources":["helpers/hooks.ts","actions/actionTypes.ts","components/AsidePanel.tsx","actions/inputAction.ts","helpers/functions.ts","components/Input.tsx","components/MainPanel.tsx","App.tsx","reducers/inputReducer.ts","reducers/index.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","ADD_INPUT","DELETE_INPUT","DELETE_ALL","AsidePanel","dispatch","inputHandler","type","payload","addInput","className","onClick","formatDate","date","str","getMonth","getDate","map","component","slice","getFullYear","join","Input","id","label","useState","inputValue","setInputValue","isDisabled","setIsDisabled","useEffect","randomColor","now","Date","match","deleteInputHandler","deleteInput","onSubmit","e","preventDefault","includes","formSubmitHandler","value","onChange","target","inputValueHandler","disabled","MainPanel","store","input","inputs","deleteAllHandler","length","reverse","App","initState","inputReducer","state","action","uuid_v4","emoji","randomWords","exactly","wordsPerString","filter","rootReducer","combineReducers","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d262d3f6.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from '../index';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const ADD_INPUT = \"ADD_INPUT\";\nexport const DELETE_INPUT = \"DELETE_INPUT\";\nexport const DELETE_ALL = \"DELETE_ALL\";\n","import * as React from 'react';\r\nimport { useAppDispatch } from '../helpers/hooks';\r\nimport { addInput } from '../actions/inputAction';\r\n\r\nconst AsidePanel: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const inputHandler = (type: string): void => {\r\n        dispatch(addInput(type));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className='container' >\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('text')\r\n                    }\r\n                >\r\n                    Add text field\r\n                </button>\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('number')}\r\n                >\r\n                    Add number field\r\n                </button>\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('color')}\r\n                >\r\n                    Add color field\r\n                </button>\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('date')}\r\n                >\r\n                    Add date field\r\n                </button>\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('range')}\r\n                >\r\n                    Add range field\r\n                </button>\r\n                <button\r\n                    className='button button_add'\r\n                    onClick={() => inputHandler('email')}\r\n                >\r\n                    Add email field\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AsidePanel;\r\n","import {\r\n    ADD_INPUT, DELETE_INPUT, DELETE_ALL,\r\n} from './actionTypes';\r\n\r\nimport {\r\n    AddInputAction, DeleteInputAction,\r\n    DeleteAllAction,\r\n} from './types';\r\n\r\nexport const addInput = (type: string): AddInputAction => ({\r\n    type: ADD_INPUT,\r\n    payload: {\r\n        type\r\n    },\r\n});\r\n\r\nexport const deleteInput = (id: string): DeleteInputAction => ({\r\n    type: DELETE_INPUT,\r\n    payload: {\r\n        id,\r\n    },\r\n});\r\n\r\nexport const deleteAll = (): DeleteAllAction => ({\r\n    type: DELETE_ALL,\r\n});\r\n","const formatDate = (date: Date): string => {\n    const str = [\n        `0${date.getMonth() + 1}`,\n        `0${date.getDate()}`\n    ].map(component => component.slice(-2));\n    return `${date.getFullYear()}-${str.join(\"-\")}`;\n}\n\nexport default formatDate;\n","import React, { useState, useEffect } from 'react';\r\nimport randomColor from 'randomcolor';\r\n\r\nimport { deleteInput } from '../actions/inputAction';\r\n\r\nimport { useAppDispatch } from '../helpers/hooks';\r\nimport formatDate from '../helpers/functions';\r\n\r\ninterface InputProps {\r\n    type: string,\r\n    id: string,\r\n    label: string\r\n}\r\n\r\nconst Input = ({ type, id, label }: InputProps): React.ReactElement => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [isDisabled, setIsDisabled] = useState(true);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (type === 'color') {\r\n            setInputValue(randomColor());\r\n        }\r\n        if (type === 'range') {\r\n            setInputValue('50');\r\n        }\r\n        if (type === 'date') {\r\n            const now = new Date();\r\n            setInputValue(formatDate(now));\r\n        }\r\n    }, [setInputValue, type]);\r\n\r\n    useEffect(() => {\r\n        if (!inputValue || (type === 'email'\r\n            && !inputValue.match(/^[a-zA-Z0-9._:$!%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]$/)\r\n        )) { setIsDisabled(true); } else { setIsDisabled(false); }\r\n    }, [inputValue, type]);\r\n\r\n    const deleteInputHandler = () => {\r\n        dispatch(deleteInput(id));\r\n    };\r\n\r\n    const inputValueHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const formSubmitHandler = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (['text', 'number', 'email'].includes(type)) setInputValue('');\r\n    };\r\n\r\n    return (\r\n        <form className=\"input\" onSubmit={(e) => formSubmitHandler(e)}>\r\n            <header className=\"input__header\">\r\n                <h4>\r\n                    {label}\r\n                    {' '}\r\n                    <span className=\"input__span\">\r\n                        (\r\n                        {type}\r\n                        )\r\n                    </span>\r\n                </h4>\r\n                <button\r\n                    aria-label=\"delete\"\r\n                    type=\"button\"\r\n                    className=\"button button_trash\"\r\n                    onClick={() => deleteInputHandler()}\r\n                />\r\n            </header>\r\n            <div className=\"input__body\">\r\n                <input\r\n                    type={type}\r\n                    value={inputValue}\r\n                    onChange={(e) => inputValueHandler(e)}\r\n                />\r\n                <button\r\n                    className=\"button button_small input__submit\"\r\n                    type=\"submit\"\r\n                    disabled={isDisabled}\r\n                >\r\n                    Console.log it!\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../helpers/hooks';\r\nimport Input from './Input';\r\nimport { deleteAll } from '../actions/inputAction';\r\n\r\ninterface InputInterface {\r\n    type: string,\r\n    id: string,\r\n    label: string,\r\n}\r\n\r\nconst MainPanel: React.FC = () => {\r\n    const { inputs } = useAppSelector((store) => store.input);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const deleteAllHandler = () => {\r\n        dispatch(deleteAll());\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className='header'>\r\n                <h1>Input challenge</h1>\r\n                {inputs.length ? (\r\n                    <button\r\n                        className='button'\r\n                        onClick={() => deleteAllHandler()}\r\n                    >\r\n                        <b>(delete all)</b>\r\n                    </button>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n            {inputs.length ? (\r\n                <div>\r\n                    {inputs\r\n                        .slice()\r\n                        .reverse()\r\n                        .map((input: InputInterface) => (\r\n                            <Input\r\n                                key={input.id}\r\n                                id={input.id}\r\n                                type={input.type}\r\n                                label={input.label}\r\n                            />\r\n                        ))}\r\n                </div>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPanel;\r\n","import React from 'react';\r\nimport AsidePanel from './components/AsidePanel';\r\nimport MainPanel from './components/MainPanel';\r\n\r\nconst App: React.FC = () => (\r\n    <div className='App' >\r\n        <AsidePanel />\r\n        <MainPanel />\r\n    </div>\r\n)\r\n\r\nexport default App;\r\n","import { AnyAction } from 'redux';\r\n\r\nimport randomWords from 'random-words';\r\nimport emoji from 'random-happy-emoji';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\n\r\nimport { ADD_INPUT, DELETE_INPUT, DELETE_ALL } from '../actions/actionTypes';\r\nimport { InputState } from './types';\r\n\r\nconst initState: InputState = {\r\n    inputs: [],\r\n};\r\n\r\nconst inputReducer = (state: InputState = initState, action: AnyAction): InputState => {\r\n    switch (action.type) {\r\n        case ADD_INPUT:\r\n            return {\r\n                ...state,\r\n                inputs: [\r\n                    ...state.inputs,\r\n                    {\r\n                        type: action.payload.type,\r\n                        id: uuid_v4(),\r\n                        label: `${emoji()} ${randomWords({ exactly: 1, wordsPerString: 2 })[0]}`\r\n                    },\r\n                ],\r\n            };\r\n        case DELETE_INPUT:\r\n            return {\r\n                ...state,\r\n                inputs: state.inputs.filter(\r\n                    (input) => input.id !== action.payload.id,\r\n                ),\r\n            };\r\n        case DELETE_ALL:\r\n            return {\r\n                ...state,\r\n                inputs: [],\r\n            };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default inputReducer;\r\n","import { combineReducers } from 'redux';\r\nimport inputReducer from './inputReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    input: inputReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport rootReducer from './reducers';\r\nimport './assets/styles/main.scss';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\n// \"Whatever is being returned from store.getState, I want the types stored ad the RootState variable\" \r\n// https://stackoverflow.com/a/67656911/13891817\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\n// \"Get the dispatch object from the store, break it down into it's types, and store it in the AppDispatch variable\"\r\n// https://stackoverflow.com/a/67656911/13891817\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store} >\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}